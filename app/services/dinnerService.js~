// Here we create an Angular service that we will use for our 
// model. In your controllers (or other services) you can include the
// dependency on any service you need. Angular will insure that the
// service is created first time it is needed and then just reuse it
// the next time.
dinnerPlannerApp.factory('Dinner', function ($resource,$cookieStore) {

  // TODO in Lab 5: Add your model code from previous labs
  // feel free to remove above example code
  // you will need to modify the model (getDish and getAllDishes) 
  // a bit to take the advantage of Angular resource service
  // check lab 5 instructions for details
//DinnerModel Object constructor
 
	//TODO Lab 2 implement the data structure that will hold number of guest
	// and selected dinner options for dinner menu
	//$cookieStore.put('menu',[]);
	this.guest = $cookieStore.get('guests');
	this.idMenu = $cookieStore.get('menu');
	var menu = new Array();
	this.menuprice= 0.00;
	this.observers = [];
	this.dish = 1;
	this.fDishes = [];
	this.pending = 0.00;
	this.apiKey = "F088t4s6QGI5T92W3Nwiju8jFU52J8SP";
	this.dish =[];

	this.DishSearch = $resource('http://api.bigoven.com/recipes',{pg:1,rpp:25,api_key:this.apiKey});

	this.Dish = $resource('http://api.bigoven.com/recipe/:id',{api_key:this.apiKey}); 

	this.transformMenu1 = function(){	
		for(i in this.idMenu){
			this.Dish.get({id:this.idMenu[i]}, function(data){
			menu.push(data);
   			},function(data){
   			});
		}
	}
	this.transformMenu1();

	this.transformMenu2 = function(){
		this.idMenu = [];
		for(u in menu){
			this.idMenu.push(menu[u].RecipeID);

		}
		$cookieStore.put('menu',this.idMenu);
	}


	this.filterDishes = function(dishlist) {
		this.fDishes = dishlist;
		//this.notifyObservers();

	}
	
	this.getFilteredDishes = function() {
		return this.fDishes;
	}


	this.setDish = function(data) {
		this.dish = data;
	}

	this.getTheDish = function(){
		return this.dish.RecipeID;
	}

	this.getTheDishData = function(){
		return this.dish;
	}

	
	this.setPendingDish = function(Recipe){
		var Pcost = 0;
		for (ing in Recipe.Ingredients){
			Pcost += Recipe.Ingredients[ing].Quantity;
		}
		return this.pending = Math.round(Pcost);
		//this.notifyObservers();
	}


	this.setPendingZero = function(){
		this.pending = 0.00;
		//this.notifyObservers();
	}

	this.getPendingCost = function(){
		return this.pending;
	}

	this.setNumberOfGuests = function(num) {
		this.guest = num;
		$cookieStore.put('guests',this.guest);
	}

	// should return 
	this.getNumberOfGuests = function() {
		return this.guest;
	}

	//Returns the dish that is on the menu for selected type 
	this.getSelectedDish = function(type) {
		for(t in menu){
			if(menu[t].type == type){
				return menu[t];
			}
		}
	}

	//Returns all the dishes on the menu.
	this.getFullMenu = function() {
		return menu;
	}

	//Returns all ingredients for all the dishes on the menu.
	this.getAllIngredients = function() {
		ingredientslist =[];
		for (k in menu){
			for (ing in menu[k].ingredients){
			ingredientslist.push(menu[k].ingredients[ing]);
			}
		}
	return ingredientslist;
	}

	//Returns the total price of the menu (all the ingredients multiplied by number of guests).
	this.getTotalMenuPrice = function() {
		this.menuprice = 0;
		for(i in menu){
			for(ing in menu[i].Ingredients){
				this.menuprice += menu[i].Ingredients[ing].Quantity*this.guest
			}
		}
		this.menuprice = Math.round(this.menuprice);
		return this.menuprice;
	}

	this.getDishPrice = function(data){
        var dishcost = 0;
		for (ing in data.Ingredients){
			dishcost += data.Ingredients[ing].Quantity*this.guest;
		}
		return dishcost = Math.round(dishcost);

	}

	//Adds the passed dish to the menu. If the dish of that type already exists on the menu
	//it is removed from the menu and the new one added.
	this.addDishToMenu = function(data) {
   		
		for(k in menu){
			if(menu[k].Category == data.Category){
				menu[k] = data;
				this.transformMenu2();
				return;
				}
			}

		menu.push(data);
		this.transformMenu2();


	}

	//Removes dish from menu
	this.removeDishFromMenu = function(id) {
		for (a in menu){
			if(menu[a].RecipeID == id){
				menu.splice(a, 1);
				this.transformMenu2();
			}
			
		}
	}





  // Angular service needs to return an object that has all the
  // methods created in it. You can consider that this is instead
  // of calling var model = new DinnerModel() we did in the previous labs
  // This is because Angular takes care of creating it when needed.
  return this;

});
